generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  quizzes   Quiz[]     @relation("UserQuizzes")
  questions Question[] @relation("UserQuestions")
  scores    Score[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Theme {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  quizzes   Quiz[]
  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Question {
  id            Int      @id @default(autoincrement())
  label         String
  answer1       String
  answer2       String
  answer3       String
  answer4       String
  correctAnswer Int
  theme         Theme    @relation(fields: [themeId], references: [id], onDelete: Cascade)
  themeId       Int
  creator       User     @relation("UserQuestions", fields: [creatorId], references: [id])
  creatorId     Int
  quizzes       Quiz[]   @relation("QuizQuestions")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Quiz {
  id        Int        @id @default(autoincrement())
  title     String
  theme     Theme      @relation(fields: [themeId], references: [id], onDelete: Cascade)
  themeId   Int
  creator   User       @relation("UserQuizzes", fields: [creatorId], references: [id])
  creatorId Int
  questions Question[] @relation("QuizQuestions")
  scores    Score[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Score {
  id        Int      @id @default(autoincrement())
  score     Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId    Int
  createdAt DateTime @default(now())

  @@unique([userId, quizId])
}
